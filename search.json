[{"path":"https://jslth.github.io/photon/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to photon","title":"Contributing to photon","text":"outlines propose change photon. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://jslth.github.io/photon/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to photon","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://jslth.github.io/photon/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to photon","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://jslth.github.io/photon/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to photon","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"JsLth/photon\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://jslth.github.io/photon/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to photon","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2 documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://jslth.github.io/photon/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"Contributing to photon","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://jslth.github.io/photon/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://jslth.github.io/photon/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://jslth.github.io/photon/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://jslth.github.io/photon/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://jslth.github.io/photon/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://jslth.github.io/photon/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://jslth.github.io/photon/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://jslth.github.io/photon/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://jslth.github.io/photon/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://jslth.github.io/photon/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://jslth.github.io/photon/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://jslth.github.io/photon/articles/nominatim-import.html","id":"opensearch","dir":"Articles","previous_headings":"","what":"OpenSearch","title":"Importing a database from Nominatim","text":"Previous setups photon based ElasticSearch search engine. Photon also offers version based OpenSearch. photon version necessary enable structured geocoding queries. Since photon 0.6.0, OpenSearch jar files provided new photon releases can downloaded setting opensearch = TRUE new_photon() function. , $import() method created directory photon_data, 10-20% larger ElasticSearch version. starting photon, can verify structured geocoding enabled running has_structured_support(). Since structured geocoding now works, can now send entire datasets structured address data. Structured geocoding allows search specific elements address instead passing free text queries. following example, search three different spatial features querying state, street, housenumber. Photon able geocode high precision due detailed data structure provide.","code":"# set opensearch = TRUE to use OpenSearch photon photon <- new_photon(dir, opensearch = TRUE, quiet = TRUE)  # set structured = TRUE to enable structured geocoding photon$import(host = \"localhost\", password = \"MNdtC2*pP#aMbe\", structured = TRUE) photon$start() has_structured_support() #> [1] TRUE place_data <- data.frame(   housenumber = c(NA, \"77C\", NA),   street = c(\"Falealilli Cross Island Road\", \"Main Beach Road\", \"Le Mafa Pass Road\"),   state = c(\"Tuamasaga\", \"Tuamasaga\", \"Atua\") )  structured(place_data) #> Simple feature collection with 3 features and 14 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -171.7759 ymin: -14.04544 xmax: -171.451 ymax: -13.8338 #> Geodetic CRS:  WGS 84 #> # A tibble: 3 × 15 #>     idx osm_type    osm_id country osm_key  city      countrycode osm_value name    state type  extent housenumber street #>   <int> <chr>        <int> <chr>   <chr>    <chr>     <chr>       <chr>     <chr>   <chr> <chr> <list> <chr>       <chr>  #> 1     1 W        319147189 Samoa   highway  Siumu Uta WS          primary   Faleal… Tuam… stre… <dbl>  NA          NA     #> 2     2 W        569855981 Samoa   building Apia      WS          yes       NA      Tuam… house <dbl>  77C         Main … #> 3     3 W         40681149 Samoa   highway  Lalomanu  WS          primary   Main S… Ātua  stre… <dbl>  NA          NA     #> # ℹ 1 more variable: geometry <POINT [°]>"},{"path":"https://jslth.github.io/photon/articles/photon.html","id":"offline-geocoding","dir":"Articles","previous_headings":"","what":"Offline geocoding","title":"Introduction to {photon}","text":"photon backend freely available photon GitHub repository. , can set local instance photon. Offline geocoding nice extremely fast, versatile doesn’t send potentially sensitive data around internet. lot cases, offline geocoding absolutely imperative, yet usually, setting offline geocoder can quite cumbersome. photon takes task! run photon, need Java Development Kit (JDK) version 11 higher. , can use {rJavaEnv} package Egor Kotov. allows easily set JDK environment local project. Setting local photon also works new_photon(). time, pass path necessary files stored country search index downloaded. global coverage also possible, global search index extremely large (around 80 GB). default, new_photon() downloads search index tagged latest also possible query search index created specific date. resulting object R6 class methods control instance. start photon, run $start(). starts external java process can accessed using $proc attribute. check service running, can use $is_ready(). Finally, properly stop photon used , can run $stop(). actually need run manually, (implicitly) executed two occasions: 1. garbage collection 2. R session ends external processes killed. compare offline online geocoding, let’s benchmark geocoding Samoan capital Apia: speed increase factor almost 60 (possibly faster machines)! Finally, clean photon, .e. stop instance delete photon directory, run $purge().","code":"# pak::pkg_install(\"rJavaEnv\") library(rJavaEnv)  # Consent to downloading Java rje_consent() #> Consent for using rJavaEnv has already been provided.  # Install and use Corretto JDK 24 use_java(24)  # Check if installation was successful java_check_version_cmd() #> JAVA_HOME: /root/.cache/R/rJavaEnv/installed/linux/x64/24 #> Java path: /root/.cache/R/rJavaEnv/installed/linux/x64/24/bin/java #> Java version: \"openjdk version \\\"24.0.1\\\" 2025-04-15 OpenJDK Runtime Environment Corretto-24.0.1.9.1 (build #> 24.0.1+9-FR) OpenJDK 64-Bit Server VM Corretto-24.0.1.9.1 (build 24.0.1+9-FR, mixed mode, sharing)\" #> [1] \"24\" path <- file.path(tempdir(), \"photon\") photon <- new_photon(path, country = \"Monaco\") #> ℹ openjdk version \"24.0.1\" 2025-04-15 #> ℹ OpenJDK Runtime Environment Corretto-24.0.1.9.1 (build 24.0.1+9-FR) #> ℹ OpenJDK 64-Bit Server VM Corretto-24.0.1.9.1 (build 24.0.1+9-FR, mixed mode, sharing) #> ✔ Successfully downloaded OpenSearch photon 0.7.0. [17.9s] #> ✔ Successfully downloaded search index. [854ms] #> • Version: 0.7.4 #> • Coverage: Monaco #> • Time: 2025-09-17 photon$start() #> Cluster Name: photon #> Base Path:    /tmp/RtmpLQIqmy/photon/./photon_data #> Num Of Node:  1 #> Node Name:      Node 1 #> HTTP Port:      9201 #> Data Directory: /tmp/RtmpLQIqmy/photon/./photon_data/node_1/data #> Log Directory:  /tmp/RtmpLQIqmy/photon/./photon_data/node_1/logs #> [2025-06-09T23:54:26,879][INFO ][o.o.n.Node               ] version[2.19.1], pid[1896], build[unknown/unknown/unknown], OS[Linux/6.6.87.1-microsoft-standard-WSL2/amd64], JVM[Amazon.com Inc./OpenJDK 64-Bit Server VM/24.0.1/24.0.1+9-FR] #> [2025-06-09T23:54:26,887][INFO ][o.o.n.Node               ] JVM home [/root/.cache/R/rJavaEnv/installed/linux/x64/24] #> [2025-06-09T23:54:26,899][INFO ][o.o.n.Node               ] JVM arguments [] #> [2025-06-09T23:54:26,932][INFO ][o.o.p.PluginsService     ] no modules loaded #> [2025-06-09T23:54:26,934][INFO ][o.o.p.PluginsService     ] loaded plugin [org.opensearch.analysis.common.CommonAnalysisPlugin] #> [2025-06-09T23:54:26,934][INFO ][o.o.p.PluginsService     ] loaded plugin [org.opensearch.geo.GeoModulePlugin] #> [2025-06-09T23:54:26,934][INFO ][o.o.p.PluginsService     ] loaded plugin [org.opensearch.transport.Netty4Plugin] #> [2025-06-09T23:54:27,174][INFO ][o.a.l.s.MemorySegmentIndexInputProvider] Using MemorySegmentIndexInput and native madvise support with Java 21 or later; to disable start with -Dorg.apache.lucene.store.MMapDirectory.enableMemorySegments=false #> [2025-06-09T23:54:27,184][INFO ][o.o.e.NodeEnvironment    ] using [1] data paths, mounts [[/ (/dev/sdd)]], net usable_space [222.3gb], net total_space [250.9gb], types [ext4] #> [2025-06-09T23:54:27,190][INFO ][o.o.e.NodeEnvironment    ] heap size [2.4gb], compressed ordinary object pointers [true] #> [2025-06-09T23:54:27,384][WARN ][o.a.l.i.v.VectorizationProvider] You are running with Java 23 or later. To make full use of the Vector API, please update Apache Lucene. #> [2025-06-09T23:54:27,603][INFO ][o.o.n.Node               ] node name [Node 1], node ID [IFRXmNbwTYi4SLrEQXOn3A], cluster name [photon], roles [data, cluster_manager] #> [2025-06-09T23:54:27,708][INFO ][o.o.e.ExtensionsManager  ] ExtensionsManager initialized #> [2025-06-09T23:54:29,302][INFO ][o.o.t.NettyAllocator     ] creating NettyAllocator with the following configs: [name=opensearch_configured, chunk_size=512kb, suggested_max_allocation_size=512kb, factors={opensearch.unsafe.use_netty_default_chunk_and_page_size=false, g1gc_enabled=true, g1gc_region_size=2mb}] #> [2025-06-09T23:54:29,499][INFO ][o.o.d.DiscoveryModule    ] using discovery type [single-node] and seed hosts providers [settings] #> [2025-06-09T23:54:30,082][WARN ][o.o.g.DanglingIndicesState] gateway.auto_import_dangling_indices is disabled, dangling indices will not be automatically detected or imported and must be managed manually #> [2025-06-09T23:54:30,572][INFO ][o.o.n.Node               ] initialized #> [2025-06-09T23:54:30,572][INFO ][o.o.n.Node               ] starting ... #> [2025-06-09T23:54:30,723][INFO ][o.o.t.TransportService   ] publish_address {127.0.0.1:9300}, bound_addresses {[::1]:9300}, {127.0.0.1:9300} #> [2025-06-09T23:54:31,016][INFO ][o.o.c.c.Coordinator      ] cluster UUID [wbcIe8ZCQw-oX0uvwZgysw] #> [2025-06-09T23:54:31,199][INFO ][o.o.c.s.MasterService    ] Tasks batched with key: org.opensearch.cluster.coordination.JoinHelper, count:3 and sample tasks: elected-as-cluster-manager ([1] nodes joined)[{Node 1}{IFRXmNbwTYi4SLrEQXOn3A}{RKCnk_jPQpmMLN2B0oUoaA}{127.0.0.1}{127.0.0.1:9300}{dm}{shard_indexing_pressure_enabled=true} elect leader, _BECOME_CLUSTER_MANAGER_TASK_, _FINISH_ELECTION_], term: 2, version: 11, delta: cluster-manager node changed {previous [], current [{Node 1}{IFRXmNbwTYi4SLrEQXOn3A}{RKCnk_jPQpmMLN2B0oUoaA}{127.0.0.1}{127.0.0.1:9300}{dm}{shard_indexing_pressure_enabled=true}]} #> [2025-06-09T23:54:31,289][INFO ][o.o.c.s.ClusterApplierService] cluster-manager node changed {previous [], current [{Node 1}{IFRXmNbwTYi4SLrEQXOn3A}{RKCnk_jPQpmMLN2B0oUoaA}{127.0.0.1}{127.0.0.1:9300}{dm}{shard_indexing_pressure_enabled=true}]}, term: 2, version: 11, reason: Publication{term=2, version=11} #> [2025-06-09T23:54:31,316][INFO ][o.o.d.PeerFinder         ] setting findPeersInterval to [1s] as node commission status = [true] for local node [{Node 1}{IFRXmNbwTYi4SLrEQXOn3A}{RKCnk_jPQpmMLN2B0oUoaA}{127.0.0.1}{127.0.0.1:9300}{dm}{shard_indexing_pressure_enabled=true}] #> [2025-06-09T23:54:31,321][WARN ][o.o.c.r.a.AllocationService] Falling back to single shard assignment since batch mode disable or multiple custom allocators set #> [2025-06-09T23:54:31,329][INFO ][o.o.h.AbstractHttpServerTransport] publish_address {127.0.0.1:9201}, bound_addresses {[::1]:9201}, {127.0.0.1:9201} #> [2025-06-09T23:54:31,330][INFO ][o.o.n.Node               ] started #> [2025-06-09T23:54:31,345][WARN ][o.o.c.r.a.AllocationService] Falling back to single shard assignment since batch mode disable or multiple custom allocators set #> [2025-06-09T23:54:31,402][INFO ][o.o.g.GatewayService     ] recovered [1] indices into cluster_state #> [2025-06-09T23:54:31,403][WARN ][o.o.c.r.a.AllocationService] Falling back to single shard assignment since batch mode disable or multiple custom allocators set #> [2025-06-09T23:54:31,599][INFO ][o.o.p.PluginsService     ] PluginService:onIndexModule index:[photon/3te8gZq4Q-u1LwWbZGtxPA] #> [2025-06-09T23:54:32,346][WARN ][o.o.c.r.a.AllocationService] Falling back to single shard assignment since batch mode disable or multiple custom allocators set #> [2025-06-09T23:54:32,519][INFO ][o.o.c.r.a.AllocationService] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[photon][2]]]). #> [2025-06-09T23:54:32,623][WARN ][o.o.c.r.a.AllocationService] Falling back to single shard assignment since batch mode disable or multiple custom allocators set #> [2025-06-09T23:54:33,179][INFO ][d.k.p.App                ] Make sure that the ES cluster is ready, this might take some time. #> [2025-06-09T23:54:33,447][INFO ][d.k.p.App                ] ES cluster is now ready. #> [2025-06-09T23:54:33,637][INFO ][o.o.c.m.MetadataIndexStateService] closing indices [photon/3te8gZq4Q-u1LwWbZGtxPA] #> [2025-06-09T23:54:33,732][INFO ][o.o.c.m.MetadataIndexStateService] completed closing of indices [photon] #> [2025-06-09T23:54:33,733][WARN ][o.o.c.r.a.AllocationService] Falling back to single shard assignment since batch mode disable or multiple custom allocators set #> [2025-06-09T23:54:33,837][WARN ][o.o.c.r.a.AllocationService] Falling back to single shard assignment since batch mode disable or multiple custom allocators set #> [2025-06-09T23:54:33,936][INFO ][o.o.p.PluginsService     ] PluginService:onIndexModule index:[photon/3te8gZq4Q-u1LwWbZGtxPA] #> [2025-06-09T23:54:34,245][INFO ][o.o.c.m.MetadataIndexStateService] opening indices [[photon/3te8gZq4Q-u1LwWbZGtxPA]] #> [2025-06-09T23:54:34,252][INFO ][o.o.p.PluginsService     ] PluginService:onIndexModule index:[photon/3te8gZq4Q-u1LwWbZGtxPA] #> [2025-06-09T23:54:34,281][WARN ][o.o.c.r.a.AllocationService] Falling back to single shard assignment since batch mode disable or multiple custom allocators set #> [2025-06-09T23:54:34,369][WARN ][o.o.c.r.a.AllocationService] Falling back to single shard assignment since batch mode disable or multiple custom allocators set #> [2025-06-09T23:54:34,452][INFO ][o.o.p.PluginsService     ] PluginService:onIndexModule index:[photon/3te8gZq4Q-u1LwWbZGtxPA] #> [2025-06-09T23:54:34,741][WARN ][o.o.c.r.a.AllocationService] Falling back to single shard assignment since batch mode disable or multiple custom allocators set #> [2025-06-09T23:54:34,880][INFO ][o.o.c.r.a.AllocationService] Cluster health status changed from [RED] to [YELLOW] (reason: [shards started [[photon][2]]]). #> [2025-06-09T23:54:34,970][WARN ][o.o.c.r.a.AllocationService] Falling back to single shard assignment since batch mode disable or multiple custom allocators set #> [2025-06-09T23:54:35,038][INFO ][o.o.p.PluginsService     ] PluginService:onIndexModule index:[photon/3te8gZq4Q-u1LwWbZGtxPA] #> [2025-06-09T23:54:35,165][INFO ][d.k.p.App                ] Starting API with the following settings: #>  Languages: [en, de, fr] #>  Import Date: 2025-06-01T03:00:01.000+0200 #>  Support Structured Queries: false #>  Support Geometries: false #> ✔ Photon is now running. [12.8s]  photon$proc #> PROCESS 'java', running, pid 1896. photon$is_ready() #> [1] TRUE photon$stop() # offline geocoding bench::mark(with_photon(photon, geocode(\"Monte Carlo\")), iterations = 25)$median #> [1] 17.1ms # online geocoding photon_pub <- new_photon(mount = FALSE) bench::mark(with_photon(photon_pub, geocode(\"Monte Carlo\")), iterations = 25)$median #> [1] 1.04s photon$purge() #> ℹ Purging an instance kills the photon process and removes the photon directory. #> Continue? (y/N/Cancel) y"},{"path":"https://jslth.github.io/photon/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonas Lieth. Author, maintainer, copyright holder.","code":""},{"path":"https://jslth.github.io/photon/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lieth J (2025). photon: High-Performance Geocoding using 'photon'. R package version 0.7.4, https://github.com/jslth/photon/.","code":"@Manual{,   title = {photon: High-Performance Geocoding using 'photon'},   author = {Jonas Lieth},   year = {2025},   note = {R package version 0.7.4},   url = {https://github.com/jslth/photon/}, }"},{"path":"https://jslth.github.io/photon/index.html","id":"photon","dir":"","previous_headings":"","what":"High-Performance Geocoding using photon","title":"High-Performance Geocoding using photon","text":"photon simple interface setup manager photon OpenStreetMap geocoder. features unstructured, structured, reverse geocoding. package allows requests public API shines setting local instances enable high-performance offline geocoding.","code":""},{"path":"https://jslth.github.io/photon/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"High-Performance Geocoding using photon","text":"install package CRAN: can install development version photon GitHub :","code":"install.packages(\"photon\") # install.packages(\"remotes\") remotes::install_github(\"jslth/photon\")"},{"path":"https://jslth.github.io/photon/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"High-Performance Geocoding using photon","text":"loading photon, package assumes want send geocoding requests public photon API. want change , can use workhorse function new_photon(). Otherwise, can directly start geocoding. Reverse geocoding means taking point geometries returning addresses place names.","code":"library(photon) places <- c(\"Paris\", \"Beijing\", \"Sao Paolo\", \"Kinshasa\")  cities1 <- geocode(places, layer = \"city\") cities1 #> Simple feature collection with 4 features and 12 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -46.63338 ymin: -23.55065 xmax: 110.7344 ymax: 48.8535 #> Geodetic CRS:  WGS 84 #> # A tibble: 4 × 13 #>     idx osm_type  osm_id country osm_key countrycode osm_value name  state type  #>   <int> <chr>      <dbl> <chr>   <chr>   <chr>       <chr>     <chr> <chr> <chr> #> 1     1 R         7.15e4 France  place   FR          city      Paris Ile-… city  #> 2     2 N         4.52e9 China   place   CN          town      Beij… Shan… city  #> 3     3 R         2.98e5 Brazil  place   BR          municipa… São … São … city  #> 4     4 R         3.88e5 Democr… bounda… CD          administ… Kins… Kins… city  #> # ℹ 3 more variables: extent <list>, county <chr>, geometry <POINT [°]> cities2 <- reverse(cities1$geometry, layer = \"city\") cities2 #> Simple feature collection with 4 features and 12 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -46.63338 ymin: -23.55065 xmax: 110.7344 ymax: 48.8535 #> Geodetic CRS:  WGS 84 #> # A tibble: 4 × 13 #>     idx osm_type  osm_id country osm_key countrycode osm_value name  state type  #>   <int> <chr>      <dbl> <chr>   <chr>   <chr>       <chr>     <chr> <chr> <chr> #> 1     1 R         7.15e4 France  place   FR          city      Paris Ile-… city  #> 2     2 N         4.52e9 China   place   CN          town      Beij… Shan… city  #> 3     3 R         2.98e5 Brazil  place   BR          municipa… São … São … city  #> 4     4 R         3.88e5 Democr… bounda… CD          administ… Kins… Kins… city  #> # ℹ 3 more variables: extent <list>, county <chr>, geometry <POINT [°]> all.equal(cities1, cities2) #> [1] TRUE"},{"path":"https://jslth.github.io/photon/index.html","id":"offline-geocoding","dir":"","previous_headings":"","what":"Offline geocoding","title":"High-Performance Geocoding using photon","text":"photon designed facilitate offline geocoding. new_photon() can install photon locally. following code install start photon covering country Germany current working directory.","code":"photon <- new_photon(path = \"./photon\", country = \"Germany\") photon$start()"},{"path":"https://jslth.github.io/photon/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related packages","title":"High-Performance Geocoding using photon","text":"{photon} package Timothée Giraud interfaces photon allow setup local instances abandoned ago. {revgeo} package Michael Hudecheck implements reverse geocoding using (among others) photon. {tidygeocoder} {nominatimlite} packages implement general (OSM) geocoding using web APIs.","code":""},{"path":"https://jslth.github.io/photon/reference/cmd_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Format command line options — cmd_options","title":"Format command line options — cmd_options","text":"Helper function format options command line calls. function accepts key-value pairs parameter name name option parameter value value option. Arguments formatted according following rules: value TRUE, add parameter name flag. value FALSE, add parameter name flag. value length(x) > 1, collapse CSV. parameter name missing, take value flag name. parameter name given, replace underscores hyphens.","code":""},{"path":"https://jslth.github.io/photon/reference/cmd_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format command line options — cmd_options","text":"","code":"cmd_options(..., use_double_hyphens = FALSE)"},{"path":"https://jslth.github.io/photon/reference/cmd_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format command line options — cmd_options","text":"... Key-value pairs command line options. use_double_hyphens TRUE, uses double hyphens designate non-abbreviated command line options single-hyphens designate abbreviated ones. FALSE, always uses single hyphens. Defaults FALSE Java photon use single hyphens.","code":""},{"path":"https://jslth.github.io/photon/reference/cmd_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format command line options — cmd_options","text":"character vector formatted command line options can used input system2 run.","code":""},{"path":"https://jslth.github.io/photon/reference/cmd_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format command line options — cmd_options","text":"","code":"# converts R parameters to CMD options # parameters for the ping command cmd_options(n = 1, w = 5, \"127.0.0.1\") #> [1] \"-n\"        \"1\"         \"-w\"        \"5\"         \"127.0.0.1\"  # sometimes, it is necessary to use double hyphens # options for the docker ps command cmd_options(\"ps\", all = TRUE, format = \"json\", use_double_hyphens = TRUE) #> [1] \"ps\"       \"--all\"    \"--format\" \"json\"      # particularly useful together with photon # the following options can be used for the `photon_opts` argument # of photon$start() cmd_options(cors_any = TRUE, data_dir = \"path/to/dir\") #> [1] \"-cors-any\"   \"-data-dir\"   \"path/to/dir\""},{"path":"https://jslth.github.io/photon/reference/download_photon.html","id":null,"dir":"Reference","previous_headings":"","what":"Download photon — download_photon","title":"Download photon — download_photon","text":"Download photon executable GitHub.","code":""},{"path":"https://jslth.github.io/photon/reference/download_photon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download photon — download_photon","text":"","code":"download_photon(   path = tempdir(),   version = NULL,   opensearch = TRUE,   only_url = FALSE,   quiet = FALSE )"},{"path":"https://jslth.github.io/photon/reference/download_photon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download photon — download_photon","text":"path Path directory store executable. Defaults tempdir(). version Version tag photon release. NULL, downloads latest known version (0.7.4). list releases can found : https://github.com/komoot/photon/releases/. Ignored jar given. opensearch TRUE, downloads OpenSearch version photon available. OpenSearch versions available photon >= 0.6.0. Since photon >= 0.7.0, OpenSearch versions recommended. Defaults TRUE. only_url TRUE, performs download. Otherwise, returns link file. quiet TRUE, suppresses informative messages.","code":""},{"path":"https://jslth.github.io/photon/reference/download_photon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download photon — download_photon","text":"only_url = FALSE, returns character string giving path downloaded file. Otherwise, returns URL downloaded.","code":""},{"path":"https://jslth.github.io/photon/reference/download_photon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download photon — download_photon","text":"","code":"download_photon(tempdir(), version = \"0.4.1\", opensearch = FALSE) #> ℹ Fetching ElasticSearch photon 0.4.1. #> ✔ Successfully downloaded ElasticSearch photon 0.4.1. [464ms] #>  #> [1] \"/tmp/Rtmp7NHWei/photon-0.4.1.jar\""},{"path":"https://jslth.github.io/photon/reference/download_searchindex.html","id":null,"dir":"Reference","previous_headings":"","what":"Download search index — download_searchindex","title":"Download search index — download_searchindex","text":"Finds downloads OpenSearch index database necessary set Photon locally.","code":""},{"path":"https://jslth.github.io/photon/reference/download_searchindex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download search index — download_searchindex","text":"","code":"download_searchindex(   country,   path = tempdir(),   date = \"latest\",   exact = FALSE,   section = NULL,   only_url = FALSE,   quiet = FALSE )"},{"path":"https://jslth.github.io/photon/reference/download_searchindex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download search index — download_searchindex","text":"country Character string can identified countryname country. extract country downloaded. \"planet\", downloads global search index (see note). path Path directory identified file stored. Defaults tempdir(). date Character string date-time object used specify creation date search index. \"latest\", download file tagged \"latest\". character string, value parseable .POSIXct. exact = FALSE, input value compared available dates closest date selected. Otherwise, file selected exactly matches input date. exact TRUE, exactly matches date. Otherwise, selects date lowest difference date parameter. section Subdirectory download server select search index. \"experimental\", selects dump made master version photon. \"archived\", selects dump made older version photon. NULL (arbitrary string), selects dump made current release. Defaults NULL. only_url TRUE, performs download. Otherwise, returns link file. quiet TRUE, suppresses informative messages.","code":""},{"path":"https://jslth.github.io/photon/reference/download_searchindex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download search index — download_searchindex","text":"only_url = FALSE, returns local path downloaded file. Otherwise, returns URL remote file.","code":""},{"path":"https://jslth.github.io/photon/reference/download_searchindex.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download search index — download_searchindex","text":"Depending country, search index databases tend large. global search index 75 GB size (10/2024). Keep mind running function.","code":""},{"path":"https://jslth.github.io/photon/reference/download_searchindex.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Download search index — download_searchindex","text":"index download depends public repository (https://download1.graphhopper.com/public/). repository hosts search indices latest stable experimental versions thus suitable reproducibility. wish make project reproducible, consider storing search index somewhere persistent. Photon generally backwards-compatible newer versions Photon guaranteed work older search indices (based personal experience). Additionally, function can download pre-built search indices country extracts. need fine-grained scope combination multiple countries, need build search index. See vignette(\"nominatim-import\", package = \"photon\").","code":""},{"path":"https://jslth.github.io/photon/reference/download_searchindex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download search index — download_searchindex","text":"","code":"# download the latest extract of Monaco download_searchindex(\"Monaco\", path = tempdir()) #> ℹ Fetching search index for Monaco, created on latest #> ✔ Successfully downloaded search index. [1.6s] #>  #> [1] \"/tmp/Rtmp7NHWei/photon-db-mc-latest.tar.bz2\"  # download the latest extract of American Samoa download_searchindex(path = tempdir(), section = NULL, country = \"Samoa\") #> ℹ Fetching search index for Samoa, created on latest #> ✔ Successfully downloaded search index. [246ms] #>  #> [1] \"/tmp/Rtmp7NHWei/photon-db-ws-latest.tar.bz2\"  # download an extract from a month ago try(download_searchindex(   path = tempdir(),   country = \"Monaco\",   date = Sys.time() - 2629800 )) #> ℹ Fetching search index for Monaco, created on 2025-07-20 #> ✔ Successfully downloaded search index. [141ms] #>  #> [1] \"/tmp/Rtmp7NHWei/photon-db-mc-250720.tar.bz2\"  # if possible, download an extract from today try(download_searchindex(   path = tempdir(),   country = \"Monaco\",   date = Sys.Date(),   exact = TRUE )) #> Error in download_searchindex(path = tempdir(), country = \"Monaco\", date = Sys.Date(),  :  #>   ! Specified `date` does not match any available dates. #> ℹ Consider setting `exact = FALSE`.  # get the latest global coverage # NOTE: the file to be downloaded is several tens of gigabytes of size! if (FALSE) { # \\dontrun{ download_searchindex(path = tempdir(), country = \"planet\")} # }"},{"path":"https://jslth.github.io/photon/reference/geocode.html","id":null,"dir":"Reference","previous_headings":"","what":"Unstructured geocoding — geocode","title":"Unstructured geocoding — geocode","text":"Geocode arbitrary text strings. Unstructured geocoding flexible generally less accurate structured geocoding.","code":""},{"path":"https://jslth.github.io/photon/reference/geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unstructured geocoding — geocode","text":"","code":"geocode(   texts,   limit = 1,   lang = \"en\",   bbox = NULL,   osm_tag = NULL,   layer = NULL,   locbias = NULL,   locbias_scale = NULL,   zoom = NULL,   latinize = TRUE,   progress = interactive() )"},{"path":"https://jslth.github.io/photon/reference/geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unstructured geocoding — geocode","text":"texts Character vector texts geocode. limit Number results return. maximum 50 results can returned single search term. Defaults 1. single text provided limit greater 1, results can uniquely linked input texts using idx column output. lang Language results. \"default\", returns results local language. bbox object can parsed st_bbox. Results must lie within bbox. osm_tag Character string giving OSM tag filter results . See details. layer Character string giving layer filter results . Can one \"house\", \"street\", \"locality\", \"district\", \"city\", \"county\", \"state\", \"country\", \"\". locbias Numeric vector length 2 object can coerced length-2 numeric vector (e.g. list sfg object). Specifies location bias geocoding format c(lon, lat). Geocoding results biased towards point. radius bias controlled zoom weight place prominence location_bias_scale. locbias_scale Numeric vector specifying importance prominence locbias. higher prominence scale gives weight important places. Possible values range 0 1. Defaults 0.2. zoom Numeric specifying radius locbias effective. Corresponds zoom level OpenStreetMap. exact relation locbias \\(0.25\\text{ km} \\cdot 2^{(18 - \\text{zoom})}\\). Defaults 16. latinize TRUE sanitizes search terms texts converting encoding \"latin1\" using latinize. can helpful search terms contain certain symbols (e.g. fancy quotes) photon handle properly. Defaults TRUE latinize conservative usually cause problems. progress TRUE, shows progress bar longer queries.","code":""},{"path":"https://jslth.github.io/photon/reference/geocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unstructured geocoding — geocode","text":"sf dataframe tibble containing following columns: idx: Internal ID specifying index texts parameter. osm_type: Type OSM element, one N (node), W (way), R (relation), P (polygon). osm_id: OpenStreetMap ID matched element. country: Country matched place. city: City matched place. osm_key: OpenStreetMap key. countrycode: ISO2 country code. housenumber: House number, applicable. postcode: Post code, applicable. locality: Locality, applicable. street: Street, applicable. district: District name, applicable. osm_value: OpenStreetMap tag value. name: Place name. type: Layer type described layer parameter. extent: Boundary box match.","code":""},{"path":"https://jslth.github.io/photon/reference/geocode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unstructured geocoding — geocode","text":"Filtering OpenStreetMap tags follows distinct syntax explained https://github.com/komoot/photon. particular: Include places tag: key:value Exclude places tag: !key:value Include places tag key: key Include places tag value: :value Exclude places tag key: !key Exclude places tag value: :!value","code":""},{"path":"https://jslth.github.io/photon/reference/geocode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unstructured geocoding — geocode","text":"","code":"# an instance must be mounted first photon <- new_photon()  # geocode a city geocode(\"Berlin\") #> Simple feature collection with 1 feature and 10 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 13.39513 ymin: 52.51739 xmax: 13.39513 ymax: 52.51739 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 11 #>     idx osm_type osm_id osm_key osm_value type  countrycode name  country extent #>   <int> <chr>     <int> <chr>   <chr>     <chr> <chr>       <chr> <chr>   <list> #> 1     1 R         62422 place   city      city  DE          Berl… Germany <dbl>  #> # ℹ 1 more variable: geometry <POINT [°]>  # return more results geocode(\"Berlin\", limit = 10) #> Simple feature collection with 10 features and 18 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -89.90316 ymin: 39.75894 xmax: 13.39513 ymax: 52.52502 #> Geodetic CRS:  WGS 84 #> # A tibble: 10 × 19 #>      idx osm_type     osm_id osm_key  osm_value     type  postcode housenumber #>    <int> <chr>         <dbl> <chr>    <chr>         <chr> <chr>    <chr>       #>  1     1 R             62422 place    city          city  NA       NA          #>  2     1 W          38862723 leisure  stadium       house 14053    3           #>  3     1 W           9393789 tourism  zoo           house 10787    8           #>  4     1 R              6647 building university    house 10117    6           #>  5     1 R          11148577 amenity  university    house 12203    NA          #>  6     1 R            170184 place    city          city  03570    NA          #>  7     1 N        3856100103 railway  station       house 10557    1           #>  8     1 R            126290 place    village       city  NA       NA          #>  9     1 N         289404068 amenity  theatre       house 10627    35          #> 10     1 R           3600565 building train_station house 10557    NA          #> # ℹ 11 more variables: countrycode <chr>, name <chr>, country <chr>, #> #   city <chr>, district <chr>, locality <chr>, state <chr>, county <chr>, #> #   street <chr>, extent <list>, geometry <POINT [°]>  # return the results in german geocode(\"Berlin\", limit = 10, lang = \"de\") #> Simple feature collection with 10 features and 18 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -89.90316 ymin: 39.75894 xmax: 13.39513 ymax: 52.52502 #> Geodetic CRS:  WGS 84 #> # A tibble: 10 × 19 #>      idx osm_type     osm_id osm_key  osm_value     type  postcode housenumber #>    <int> <chr>         <dbl> <chr>    <chr>         <chr> <chr>    <chr>       #>  1     1 R             62422 place    city          city  NA       NA          #>  2     1 W          38862723 leisure  stadium       house 14053    3           #>  3     1 W           9393789 tourism  zoo           house 10787    8           #>  4     1 R          11148577 amenity  university    house 12203    NA          #>  5     1 R              6647 building university    house 10117    6           #>  6     1 R            170184 place    city          city  03570    NA          #>  7     1 R           3600565 building train_station house 10557    NA          #>  8     1 N        3856100103 railway  station       house 10557    1           #>  9     1 R            126290 place    village       city  NA       NA          #> 10     1 R           1273140 amenity  university    house 12165    NA          #> # ℹ 11 more variables: countrycode <chr>, name <chr>, country <chr>, #> #   city <chr>, district <chr>, locality <chr>, state <chr>, county <chr>, #> #   street <chr>, extent <list>, geometry <POINT [°]>  # limit to cities geocode(\"Berlin\", layer = \"city\") #> Simple feature collection with 1 feature and 10 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 13.39513 ymin: 52.51739 xmax: 13.39513 ymax: 52.51739 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 11 #>     idx osm_type osm_id osm_key osm_value type  countrycode name  country extent #>   <int> <chr>     <int> <chr>   <chr>     <chr> <chr>       <chr> <chr>   <list> #> 1     1 R         62422 place   city      city  DE          Berl… Germany <dbl>  #> # ℹ 1 more variable: geometry <POINT [°]>  # limit to European cities geocode(\"Berlin\", bbox = c(xmin = -71.18, ymin = 44.46, xmax = 13.39, ymax = 52.52)) #> Simple feature collection with 1 feature and 15 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 13.23981 ymin: 52.51458 xmax: 13.23981 ymax: 52.51458 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 16 #>     idx osm_type osm_id osm_key osm_value type  postcode housenumber countrycode #>   <int> <chr>     <int> <chr>   <chr>     <chr> <chr>    <chr>       <chr>       #> 1     1 W        3.89e7 leisure stadium   house 14053    3           DE          #> # ℹ 7 more variables: name <chr>, country <chr>, city <chr>, district <chr>, #> #   street <chr>, extent <list>, geometry <POINT [°]>  # search for museums in berlin geocode(\"Berlin\", osm_tag = \"tourism:museum\") #> Simple feature collection with 1 feature and 15 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 13.50136 ymin: 52.5417 xmax: 13.50136 ymax: 52.5417 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 16 #>     idx osm_type    osm_id osm_key osm_value type  postcode countrycode name     #>   <int> <chr>        <int> <chr>   <chr>     <chr> <chr>    <chr>       <chr>    #> 1     1 W        367216314 tourism museum    house 13055    DE          Memoria… #> # ℹ 7 more variables: country <chr>, city <chr>, district <chr>, #> #   locality <chr>, street <chr>, extent <list>, geometry <POINT [°]>  # search for touristic attractions in berlin geocode(\"Berlin\", osm_tag = \"tourism\") #> Simple feature collection with 1 feature and 16 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 13.33923 ymin: 52.50845 xmax: 13.33923 ymax: 52.50845 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 17 #>     idx osm_type osm_id osm_key osm_value type  postcode housenumber countrycode #>   <int> <chr>     <int> <chr>   <chr>     <chr> <chr>    <chr>       <chr>       #> 1     1 W        9.39e6 tourism zoo       house 10787    8           DE          #> # ℹ 8 more variables: name <chr>, country <chr>, city <chr>, district <chr>, #> #   locality <chr>, street <chr>, extent <list>, geometry <POINT [°]>  # search for anything but tourism geocode(\"Berlin\", osm_tag = \"!tourism\") #> Simple feature collection with 1 feature and 10 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 13.39513 ymin: 52.51739 xmax: 13.39513 ymax: 52.51739 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 11 #>     idx osm_type osm_id osm_key osm_value type  countrycode name  country extent #>   <int> <chr>     <int> <chr>   <chr>     <chr> <chr>       <chr> <chr>   <list> #> 1     1 R         62422 place   city      city  DE          Berl… Germany <dbl>  #> # ℹ 1 more variable: geometry <POINT [°]>  # use location biases to match Berlin, IL instead of Berlin, DE geocode(\"Berlin\", locbias = c(-100, 40), locbias_scale = 0.1, zoom = 7, osm_tag = \"place\") #> Simple feature collection with 1 feature and 12 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -89.90316 ymin: 39.75894 xmax: -89.90316 ymax: 39.75894 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 13 #>     idx osm_type osm_id osm_key osm_value type  countrycode name   country state #>   <int> <chr>     <int> <chr>   <chr>     <chr> <chr>       <chr>  <chr>   <chr> #> 1     1 R        126290 place   village   city  US          Berlin United… Illi… #> # ℹ 3 more variables: county <chr>, extent <list>, geometry <POINT [°]>  # latinization can help normalize search terms geocode(\"Luatuanu\\u2019u\", latinize = FALSE) # fails #> Simple feature collection with 1 feature and 11 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -171.6764 ymin: -13.87342 xmax: -171.6764 ymax: -13.87342 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 12 #>     idx osm_type  osm_id osm_key osm_value type  countrycode name  country state #>   <int> <chr>      <int> <chr>   <chr>     <chr> <chr>       <chr> <chr>   <chr> #> 1     1 W         1.10e9 landuse resident… loca… WS          Luat… Samoa   Ātua  #> # ℹ 2 more variables: extent <list>, geometry <POINT [°]> geocode(\"Luatuanu\\u2019u\", latinize = TRUE)  # works #> Simple feature collection with 1 feature and 11 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -171.6764 ymin: -13.87342 xmax: -171.6764 ymax: -13.87342 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 12 #>     idx osm_type  osm_id osm_key osm_value type  countrycode name  country state #>   <int> <chr>      <int> <chr>   <chr>     <chr> <chr>       <chr> <chr>   <chr> #> 1     1 W         1.10e9 landuse resident… loca… WS          Luat… Samoa   Ātua  #> # ℹ 2 more variables: extent <list>, geometry <POINT [°]>"},{"path":"https://jslth.github.io/photon/reference/get_instance.html","id":null,"dir":"Reference","previous_headings":"","what":"Photon utilities — get_instance","title":"Photon utilities — get_instance","text":"Utilities manage photon instances. functions operate mounted photon instances can initialized using new_photon. get_instance() retrieves active photon instance. get_photon_url() retrieves photon URL send requests.","code":""},{"path":"https://jslth.github.io/photon/reference/get_instance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Photon utilities — get_instance","text":"","code":"get_instance()  get_photon_url()"},{"path":"https://jslth.github.io/photon/reference/get_instance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Photon utilities — get_instance","text":"get_instance returns R6 object class photon. get_photon_url() returns URL string.","code":""},{"path":"https://jslth.github.io/photon/reference/get_instance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Photon utilities — get_instance","text":"","code":"# make a new photon instance new_photon() #> <photon> #>   Type   : remote #>   Server : https://photon.komoot.io/  # retrieve it from the cache get_instance() #> <photon> #>   Type   : remote #>   Server : https://photon.komoot.io/  # get the server url get_photon_url() #> [1] \"https://photon.komoot.io/\""},{"path":"https://jslth.github.io/photon/reference/has_java.html","id":null,"dir":"Reference","previous_headings":"","what":"Is Java installed? — has_java","title":"Is Java installed? — has_java","text":"Utility function check Java installed right version.","code":""},{"path":"https://jslth.github.io/photon/reference/has_java.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is Java installed? — has_java","text":"","code":"has_java(version = NULL)"},{"path":"https://jslth.github.io/photon/reference/has_java.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is Java installed? — has_java","text":"version Character string specifying minimum version Java. installed Java version lower , returns FALSE. NULL, checks kind Java installed system.","code":""},{"path":"https://jslth.github.io/photon/reference/has_java.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is Java installed? — has_java","text":"logical vector length 1.","code":""},{"path":"https://jslth.github.io/photon/reference/has_java.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is Java installed? — has_java","text":"","code":"has_java() # Is Java installed? #> [1] TRUE has_java(\"11\") # Is Java > 11 installed? #> [1] TRUE"},{"path":"https://jslth.github.io/photon/reference/latinize.html","id":null,"dir":"Reference","previous_headings":"","what":"Latinization — latinize","title":"Latinization — latinize","text":"Helper tool transliterate various encodings latin. Attempts convert character vector current encoding \"latin1\" - fails - defaults back original term. can useful geocode structured attempting geocode terms containing symbols photon support.","code":""},{"path":"https://jslth.github.io/photon/reference/latinize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Latinization — latinize","text":"","code":"latinize(x, encoding = \"latin1\")"},{"path":"https://jslth.github.io/photon/reference/latinize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Latinization — latinize","text":"x character vector. encoding Encoding strings x converted . conversion fails, defaults back original encoding. Defaults \"latin1\".","code":""},{"path":"https://jslth.github.io/photon/reference/latinize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Latinization — latinize","text":"transliterated vector length x. NAs avoided.","code":""},{"path":"https://jslth.github.io/photon/reference/latinize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Latinization — latinize","text":"","code":"# converts fancy apostrophes to normal ones latinize(\"Luatuanu\\u2019u\") #> [1] \"Luatuanu’u\"  # does nothing latinize(\"Berlin\") #> [1] \"Berlin\"  # also does nothing, although it would fail with `iconv` latinize(\"\\u0391\\u03b8\\u03ae\\u03bd\\u03b1\") #> [1] \"Αθήνα\""},{"path":"https://jslth.github.io/photon/reference/new_photon.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a photon instance — new_photon","title":"Initialize a photon instance — new_photon","text":"Initialize photon instance creating new photon object. object stored R session can used perform geocoding requests. Instances can either local remote. Remote instances require nothing URL geocoding requests sent . Local instances require setup photon executable, search index, Java. See photon_local details.","code":""},{"path":"https://jslth.github.io/photon/reference/new_photon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a photon instance — new_photon","text":"","code":"new_photon(   path = NULL,   url = NULL,   photon_version = NULL,   country = NULL,   date = \"latest\",   exact = FALSE,   section = NULL,   opensearch = TRUE,   mount = TRUE,   overwrite = FALSE,   quiet = FALSE )"},{"path":"https://jslth.github.io/photon/reference/new_photon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a photon instance — new_photon","text":"path Path directory photon executable data stored. Defaults directory \"photon\" current working directory. NULL, remote instance set based url parameter. url URL photon server connect . NULL path also NULL, connects public API https://photon.komoot.io/. photon_version Version photon used. list releases can found : https://github.com/komoot/photon/releases/. Ignored jar given. NULL, uses latest known version. country Character string can identified countryname country. extract country downloaded. \"planet\", downloads global search index. NULL, downloads index leaves download import user. date Character string date-time object used specify creation date search index. \"latest\", download file tagged \"latest\". character string, value parseable .POSIXct. exact = FALSE, input value compared available dates closest date selected. Otherwise, file selected exactly matches input date. exact TRUE, exactly matches date. Otherwise, selects date lowest difference date parameter. section Subdirectory download server select search index. \"experimental\", selects dump made master version photon. \"archived\", selects dump made older version photon. NULL (arbitrary string), selects dump made current release. Defaults NULL. opensearch TRUE, attempts download OpenSearch version photon. OpenSearch-based photon supports structrued geocoding. Readily available OpenSearch photon executables offered since photon version 0.6.0. earlier versions, need build source using gradle. case, TRUE, look OpenSearch version photon specified path. Since photon version 0.7.0, OpenSearch recommended option. Defaults TRUE. mount TRUE, mounts object session functions like geocode automatically detect new instance. FALSE, initializies instance mount session. Defaults TRUE. overwrite TRUE, overwrites existing jar files search indices initializing new instance. Defaults FALSE. quiet TRUE, suppresses informative messages.","code":""},{"path":"https://jslth.github.io/photon/reference/new_photon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a photon instance — new_photon","text":"R6 object class photon.","code":""},{"path":"https://jslth.github.io/photon/reference/new_photon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a photon instance — new_photon","text":"","code":"# connect to public API photon <- new_photon()  # connect to arbitrary server photon <- new_photon(url = \"https://photonserver.org\")  if (has_java(\"11\")) { # set up a local instance in a temporary directory dir <- file.path(tempdir(), \"photon\") photon <- new_photon(dir, country = \"Monaco\") } #> ℹ openjdk version \"17.0.16\" 2025-07-15 #> ℹ OpenJDK Runtime Environment Temurin-17.0.16+8 (build 17.0.16+8) #> ℹ OpenJDK 64-Bit Server VM Temurin-17.0.16+8 (build 17.0.16+8, mixed mode, #>   sharing) #> ℹ Fetching OpenSearch photon 0.7.4. #> ✔ Successfully downloaded OpenSearch photon 0.7.4. [378ms] #>  #> ℹ Fetching search index for Monaco, created on latest #> ✔ Successfully downloaded search index. [816ms] #>  #> • Version: 0.7.4 #> • Coverage: Monaco #> • Time: 2025-10-31  photon$purge(ask = FALSE)"},{"path":"https://jslth.github.io/photon/reference/photon-package.html","id":null,"dir":"Reference","previous_headings":"","what":"photon: High-Performance Geocoding using 'photon' — photon-package","title":"photon: High-Performance Geocoding using 'photon' — photon-package","text":"Features unstructured, structured reverse geocoding using 'photon' geocoding API https://photon.komoot.io/. Facilitates setup local 'photon' instances enable offline geocoding.","code":""},{"path":"https://jslth.github.io/photon/reference/photon-package.html","id":"terms-of-use","dir":"Reference","previous_headings":"","what":"Terms of use","title":"photon: High-Performance Geocoding using 'photon' — photon-package","text":"https://photon.komoot.io using public API: \"can use API project, please fair - extensive usage throttled. guarantee availability usage might subject change future.\" Note terms apply public API (new_photon()), local instances (e.g. new_photon(path = \".\"))! public API, package sets default 1 request per second (see ).","code":""},{"path":"https://jslth.github.io/photon/reference/photon-package.html","id":"global-options","dir":"Reference","previous_headings":"","what":"Global options","title":"photon: High-Performance Geocoding using 'photon' — photon-package","text":"number global options can set change behavior package functions. include: photon_throttle Rate limit used throttle requests. default, throttle set non-komoot instances. komoot's public API, option defaults 1 request per second. See req_throttle. photon_max_tries Number retries failing request ultimately aborting. Defaults 3. See req_retry. photon_debug Whether echo command external processes GET requests sent photon. Defaults FALSE. photon_movers Whether moving verbosity allowed. FALSE, disables progress bars spinners globally. Overwritten local parameters. Defaults TRUE. option useful non-interactive sessions like RMarkdown. photon_setup_warn Whether convert warnings photon logs R warnings. Many warnings log somewhat useless, can important. Defaults TRUE.","code":""},{"path":[]},{"path":"https://jslth.github.io/photon/reference/photon-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"photon: High-Performance Geocoding using 'photon' — photon-package","text":"Maintainer: Jonas Lieth jonas.lieth@gesis.org (ORCID) [copyright holder]","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Local photon instance — photon_local","title":"Local photon instance — photon_local","text":"R6 class used initialize manage local photon instances. can download setup Java, photon executable, necessary OpenSearch index. can start, stop, query status photon instance. also basis geocoding requests used retrieve URL geocoding.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"search-indices","dir":"Reference","previous_headings":"","what":"Search indices","title":"Local photon instance — photon_local","text":"Search indices can self-provided importing existing Nominatim database can downloaded Photon download server. want download pre-built search indices, simply provide country string initialization use $download_data method. Pre-built search indices come support structured geocoding. want build Nominatim, provide country string use $import method. See vignette(\"nominatim-import\", package = \"photon\") details import Nominatim. enable structured geocoding, photon geocoder needs built support OpenSearch. Since photon 0.7.0, OpenSearch jar files standard ElasticSearch deprecated.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Local photon instance — photon_local","text":"photon::photon -> photon_local","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Local photon instance — photon_local","text":"path Path directory photon instance stored. proc process object handles external process running photon.","code":""},{"path":[]},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Local photon instance — photon_local","text":"photon_local$new() photon_local$mount() photon_local$info() photon_local$help() photon_local$purge() photon_local$import() photon_local$start() photon_local$stop() photon_local$download_data() photon_local$remove_data() photon_local$is_running() photon_local$is_ready() photon_local$get_url() photon_local$get_logs() photon_local$clone()","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Local photon instance — photon_local","text":"Initialize local photon instance. necessary, downloads photon executable, search index, Java.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$new(   path,   photon_version = NULL,   country = NULL,   date = \"latest\",   exact = FALSE,   section = \"experimental\",   opensearch = TRUE,   mount = TRUE,   overwrite = FALSE,   quiet = FALSE )"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local photon instance — photon_local","text":"path Path directory photon executable data stored. photon_version Version photon used. list releases can found : https://github.com/komoot/photon/releases/. Ignored jar given. NULL, uses latest known version (Currently: 0.7.4). country Character string can identified countryname country. extract country downloaded. \"planet\", downloads global search index. date Character string date-time object used specify creation date search index. \"latest\", download file tagged \"latest\". character string, value parseable .POSIXct. exact = FALSE, input value compared available dates closest date selected. Otherwise, file selected exactly matches input date. exact TRUE, exactly matches date. Otherwise, selects date lowest difference date parameter. section Subdirectory download server select search index. \"experimental\", selects dump made master version photon. \"archived\", selects dump made older version photon. NULL (arbitrary string), selects dump made current release. Defaults NULL. opensearch Superseded photon versions >= 0.7.0. TRUE, attempts download OpenSearch version photon. OpenSearch-based photon supports structrued geocoding. Readily available OpenSearch photon executables offered since photon version 0.6.0. earlier versions, need build source using gradle. case, TRUE, look OpenSearch version photon specified path. Since photon version 0.7.0, OpenSearch recommended option. Defaults TRUE. mount TRUE, mounts object session functions like geocode automatically detect new instance. FALSE, initializies instance mount session. Defaults TRUE. overwrite TRUE, overwrites existing jar files search indices initializing new instance. Defaults FALSE. quiet TRUE, suppresses informative messages.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-mount-","dir":"Reference","previous_headings":"","what":"Method mount()","title":"Local photon instance — photon_local","text":"Attach object session. mounted, geocoding functions send requests URL instance. Manually mounting useful want switch multiple photon instances.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$mount()"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-info-","dir":"Reference","previous_headings":"","what":"Method info()","title":"Local photon instance — photon_local","text":"Retrieve metadata java photon version used well country creation date search index.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$info()"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Local photon instance — photon_local","text":"list containing java version, photon version, applicable, spatial temporal coverage search index.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-help-","dir":"Reference","previous_headings":"","what":"Method help()","title":"Local photon instance — photon_local","text":"Print default arguments R console. can helpful get list additional photon arguments $start() $import().","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$help()"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Local photon instance — photon_local","text":"Nothing, prints console.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-purge-","dir":"Reference","previous_headings":"","what":"Method purge()","title":"Local photon instance — photon_local","text":"Kill photon process remove directory. Useful get rid instance entirely.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$purge(ask = TRUE)"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local photon instance — photon_local","text":"ask TRUE, asks confirmation purging instance.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Local photon instance — photon_local","text":"NULL, invisibly.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-import-","dir":"Reference","previous_headings":"","what":"Method import()","title":"Local photon instance — photon_local","text":"Import Postgres Nominatim database photon. Runs photon jar file using additional parameter -nominatim-import. Requires running Nominatim database can connected .","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$import(   host = \"127.0.0.1\",   port = 5432,   database = \"nominatim\",   user = \"nominatim\",   password = \"\",   structured = FALSE,   update = FALSE,   enable_update_api = FALSE,   languages = c(\"en\", \"fr\", \"de\", \"it\"),   countries = NULL,   extra_tags = NULL,   json = FALSE,   timeout = 60,   java_opts = NULL,   photon_opts = NULL )"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local photon instance — photon_local","text":"host Postgres host database. Defaults \"127.0.0.1\". port Postgres port database. Defaults 5432. database Postgres database name. Defaults \"nominatim\". user Postgres database user. Defaults \"nominatim\". password Postgres database password. Defaults \"\". structured TRUE, enables structured query support importing database. allows usage structured. Structured queries supported OpenSearch version photon. See section \"OpenSearch\" . Defaults FALSE. update TRUE, fetches updates Nominatim database, updating search index without offering API. FALSE, imports database deletes previous index. Defaults FALSE. enable_update_api TRUE, enables additional endpoint /nominatim-update, allows updates Nominatim databases. languages Character vector specifying languages import Nominatim databases. Defaults English, French, German, Italian. countries Character vector specifying country codes import Nominatim database. Defaults country codes. extra_tags Character vector specifying extra OSM tags import Nominatim database. tags used augment geocoding results. Defaults NULL. json TRUE, dumps imported Nominatim database JSON file returns path output file. Defaults FALSE. timeout Time seconds java process aborts. Defaults 60 seconds. java_opts Character vector flags passed java command. photon_opts Character vector flags passed photon jar java command. See cmd_options helper function.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-start-","dir":"Reference","previous_headings":"","what":"Method start()","title":"Local photon instance — photon_local","text":"Start local instance Photon geocoder. Runs jar executable located instance directory.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$start(   host = \"0.0.0.0\",   port = \"2322\",   ssl = FALSE,   timeout = 60,   java_opts = NULL,   photon_opts = NULL )"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local photon instance — photon_local","text":"host Character string host name geocoder opened . port Port geocoder listen . ssl TRUE, uses https, otherwise http. Defaults FALSE. timeout Time seconds java process aborts. Defaults 60 seconds. java_opts Character vector flags passed java command. photon_opts Character vector flags passed photon jar java command. See cmd_options helper function.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local photon instance — photon_local","text":"certain way determine photon instance ready, clear way yet determine photon setup failed. Due , failing setup may sometimes hang instead emitting error. case, please open bug report.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-stop-","dir":"Reference","previous_headings":"","what":"Method stop()","title":"Local photon instance — photon_local","text":"Kills running photon process.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$stop()"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-download-data-","dir":"Reference","previous_headings":"","what":"Method download_data()","title":"Local photon instance — photon_local","text":"Downloads search index using download_searchindex.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$download_data(   country,   date = \"latest\",   exact = FALSE,   section = \"experimental\" )"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local photon instance — photon_local","text":"country Character string can identified countryname country. extract country downloaded. \"planet\", downloads global search index. date Character string date-time object used specify creation date search index. \"latest\", download file tagged \"latest\". character string, value parseable .POSIXct. exact = FALSE, input value compared available dates closest date selected. Otherwise, file selected exactly matches input date. exact TRUE, exactly matches date. Otherwise, selects date lowest difference date parameter. section Subdirectory download server select search index. \"experimental\", selects dump made master version photon. \"archived\", selects dump made older version photon. NULL (arbitrary string), selects dump made current release. Defaults NULL.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-remove-data-","dir":"Reference","previous_headings":"","what":"Method remove_data()","title":"Local photon instance — photon_local","text":"Removes data currently used photon directory. affects unpacked photon_data directory, archived files.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$remove_data()"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-is-running-","dir":"Reference","previous_headings":"","what":"Method is_running()","title":"Local photon instance — photon_local","text":"Checks whether photon instance running ready. difference $is_ready() $is_running() checks specifically running photon instance managed process photon object. words, $is_running() returns TRUE $proc$is_alive() $is_ready() return TRUE. method useful want ensure photon object can control photon server (mostly internal use).","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$is_running()"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Local photon instance — photon_local","text":"logical length 1.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-is-ready-","dir":"Reference","previous_headings":"","what":"Method is_ready()","title":"Local photon instance — photon_local","text":"Checks whether photon instance ready take requests. case photon server returns HTTP 400 sending queryless request. method useful want check whether can send requests.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$is_ready()"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Local photon instance — photon_local","text":"logical length 1.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-get-url-","dir":"Reference","previous_headings":"","what":"Method get_url()","title":"Local photon instance — photon_local","text":"Constructs URL geocoding requests sent .","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$get_url()"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Local photon instance — photon_local","text":"URL send requests .","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-get-logs-","dir":"Reference","previous_headings":"","what":"Method get_logs()","title":"Local photon instance — photon_local","text":"Retrieve logs previous photon runs.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$get_logs()"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Local photon instance — photon_local","text":"Returns dataframe containing run ID (rid, highest number recent run), timestamp (ts), thread, log type (INFO, WARN, ERROR), class trace error message.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Local photon instance — photon_local","text":"objects class cloneable method.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instance — photon_local","text":"","code":"photon_local$clone(deep = FALSE)"},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local photon instance — photon_local","text":"deep Whether make deep clone.","code":""},{"path":"https://jslth.github.io/photon/reference/photon_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local photon instance — photon_local","text":"","code":"if (has_java(\"11\")) { dir <- file.path(tempdir(), \"photon\")  # start a new instance using a Monaco extract photon <- new_photon(path = dir, country = \"Monaco\")  # start a new instance with an older photon version photon <- new_photon(path = dir, photon_version = \"0.4.1\", opensearch = FALSE) } #> ℹ openjdk version \"17.0.16\" 2025-07-15 #> ℹ OpenJDK Runtime Environment Temurin-17.0.16+8 (build 17.0.16+8) #> ℹ OpenJDK 64-Bit Server VM Temurin-17.0.16+8 (build 17.0.16+8, mixed mode, #>   sharing) #> ℹ Fetching OpenSearch photon 0.7.4. #> ✔ Successfully downloaded OpenSearch photon 0.7.4. [138ms] #>  #> ℹ Fetching search index for Monaco, created on latest #> ✔ Successfully downloaded search index. [474ms] #>  #> • Version: 0.7.4 #> • Coverage: Monaco #> • Time: 2025-10-31 #> ℹ openjdk version \"17.0.16\" 2025-07-15 #> ℹ OpenJDK Runtime Environment Temurin-17.0.16+8 (build 17.0.16+8) #> ℹ OpenJDK 64-Bit Server VM Temurin-17.0.16+8 (build 17.0.16+8, mixed mode, #>   sharing) #> ℹ Fetching ElasticSearch photon 0.4.1. #> ✔ Successfully downloaded ElasticSearch photon 0.4.1. [104ms] #>  #> ℹ A search index already exists at the given path. Download will be skipped #> • Version: 0.4.1 #> • Coverage: Monaco #> • Time: 2025-10-31  if (FALSE) { # \\dontrun{ # import a nominatim database using OpenSearch photon # this example requires the OpenSearch version of photon and a running # Nominatim server. photon <- new_photon(path = dir, opensearch = TRUE) photon$import(photon_options = cmd_options(port = 29146, password = \"pgpass\"))} # }  photon$purge(ask = FALSE)"},{"path":"https://jslth.github.io/photon/reference/purge_java.html","id":null,"dir":"Reference","previous_headings":"","what":"Purge Java processes — purge_java","title":"Purge Java processes — purge_java","text":"Kill selected running Java processes. function useful stop Photon instances able kill process objects. aware can also kill Java processes photon application using function!","code":""},{"path":"https://jslth.github.io/photon/reference/purge_java.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Purge Java processes — purge_java","text":"","code":"purge_java(pids = NULL, ask = TRUE)"},{"path":"https://jslth.github.io/photon/reference/purge_java.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Purge Java processes — purge_java","text":"pids PIDs kill. PIDs Java processes. NULL, tries kill Java processes. ask TRUE, asks consent killing processes. Defaults TRUE.","code":""},{"path":"https://jslth.github.io/photon/reference/purge_java.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Purge Java processes — purge_java","text":"integer vector pkill / Taskkill status codes NULL running Java processes found.","code":""},{"path":"https://jslth.github.io/photon/reference/purge_java.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Purge Java processes — purge_java","text":"list running Java tasks retrieved using ps (Linux MacOS) tasklist (Windows). Tasks killed using pkill (Linux MacOS) Taskkill (Windows).","code":""},{"path":"https://jslth.github.io/photon/reference/purge_java.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Purge Java processes — purge_java","text":"","code":"# NOTE: These examples should only be run interactively or when you are # sure that no other java processes are running simultaneously! if (FALSE) { # \\dontrun{ purge_java() # does nothing if no java processes are running  # start a new photon instance dir <- file.path(tempdir(), \"photon\") photon <- new_photon(dir, country = \"Monaco\") photon$start()  # kill photon using a sledgehammer purge_java()  photon$start()  # kill photon using a scalpel library(ps) p <- ps_handle(photon$proc$get_pid()) pids <- sapply(ps_children(p), ps::ps_pid) purge_java(pids)} # }"},{"path":"https://jslth.github.io/photon/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. processx process, run","code":""},{"path":"https://jslth.github.io/photon/reference/reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse geocoding — reverse","title":"Reverse geocoding — reverse","text":"Reverse geocode set points retrieve corresponding place names. geocode place name address, see unstructured structured geocoding.","code":""},{"path":"https://jslth.github.io/photon/reference/reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse geocoding — reverse","text":"","code":"reverse(   .data,   radius = NULL,   limit = 1,   lang = \"en\",   osm_tag = NULL,   layer = NULL,   locbias = NULL,   locbias_scale = NULL,   zoom = NULL,   distance_sort = TRUE,   progress = interactive() )"},{"path":"https://jslth.github.io/photon/reference/reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse geocoding — reverse","text":".data dataframe list names lon lat, sfc sf object containing point geometries. radius Numeric specifying range around points .data used searching. limit Number results return. maximum 50 results can returned single search term. Defaults 1. single text provided limit greater 1, results can uniquely linked input texts using idx column output. lang Language results. \"default\", returns results local language. osm_tag Character string giving OSM tag filter results . See details. layer Character string giving layer filter results . Can one \"house\", \"street\", \"locality\", \"district\", \"city\", \"county\", \"state\", \"country\", \"\". locbias Numeric vector length 2 object can coerced length-2 numeric vector (e.g. list sfg object). Specifies location bias geocoding format c(lon, lat). Geocoding results biased towards point. radius bias controlled zoom weight place prominence location_bias_scale. locbias_scale Numeric vector specifying importance prominence locbias. higher prominence scale gives weight important places. Possible values range 0 1. Defaults 0.2. zoom Numeric specifying radius locbias effective. Corresponds zoom level OpenStreetMap. exact relation locbias \\(0.25\\text{ km} \\cdot 2^{(18 - \\text{zoom})}\\). Defaults 16. distance_sort TRUE, sorts reverse geocoding results based distance input point. Defaults TRUE. progress TRUE, shows progress bar longer queries.","code":""},{"path":"https://jslth.github.io/photon/reference/reverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse geocoding — reverse","text":"sf dataframe tibble containing following columns: idx: Internal ID specifying index texts parameter. osm_type: Type OSM element, one N (node), W (way), R (relation), P (polygon). osm_id: OpenStreetMap ID matched element. country: Country matched place. city: City matched place. osm_key: OpenStreetMap key. countrycode: ISO2 country code. housenumber: House number, applicable. postcode: Post code, applicable. locality: Locality, applicable. street: Street, applicable. district: District name, applicable. osm_value: OpenStreetMap tag value. name: Place name. type: Layer type described layer parameter. extent: Boundary box match.","code":""},{"path":"https://jslth.github.io/photon/reference/reverse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reverse geocoding — reverse","text":"Filtering OpenStreetMap tags follows distinct syntax explained https://github.com/komoot/photon. particular: Include places tag: key:value Exclude places tag: !key:value Include places tag key: key Include places tag value: :value Exclude places tag key: !key Exclude places tag value: :!value","code":""},{"path":"https://jslth.github.io/photon/reference/reverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse geocoding — reverse","text":"","code":"# an instance must be mounted first photon <- new_photon()  # works with sf objects sf_data <- sf::st_sfc(sf::st_point(c(8, 52)), sf::st_point(c(7, 52)), crs = 4326) reverse(sf_data) #> Simple feature collection with 2 features and 17 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 6.995134 ymin: 51.99925 xmax: 7.999094 ymax: 52.00153 #> Geodetic CRS:  WGS 84 #> # A tibble: 2 × 18 #>     idx osm_type     osm_id osm_key osm_value   type  postcode countrycode name  #>   <int> <chr>         <dbl> <chr>   <chr>       <chr> <chr>    <chr>       <chr> #> 1     1 W          28000939 highway unclassifi… stre… 48336    DE          Gröb… #> 2     2 N        4210183016 place   house       house 48703    DE          NA    #> # ℹ 9 more variables: country <chr>, city <chr>, district <chr>, state <chr>, #> #   county <chr>, extent <list>, housenumber <chr>, street <chr>, #> #   geometry <POINT [°]>  # ... but also with simple dataframes df_data <- data.frame(lon = c(8, 7), lat = c(52, 52)) reverse(df_data) #> Simple feature collection with 2 features and 17 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 6.995134 ymin: 51.99925 xmax: 7.999094 ymax: 52.00153 #> Geodetic CRS:  WGS 84 #> # A tibble: 2 × 18 #>     idx osm_type     osm_id osm_key osm_value   type  postcode countrycode name  #>   <int> <chr>         <dbl> <chr>   <chr>       <chr> <chr>    <chr>       <chr> #> 1     1 W          28000939 highway unclassifi… stre… 48336    DE          Gröb… #> 2     2 N        4210183016 place   house       house 48703    DE          NA    #> # ℹ 9 more variables: country <chr>, city <chr>, district <chr>, state <chr>, #> #   county <chr>, extent <list>, housenumber <chr>, street <chr>, #> #   geometry <POINT [°]>  # limit search radius to 10m reverse(df_data, radius = 10) #> Simple feature collection with 2 features and 17 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 6.995134 ymin: 51.99925 xmax: 7.999094 ymax: 52.00153 #> Geodetic CRS:  WGS 84 #> # A tibble: 2 × 18 #>     idx osm_type     osm_id osm_key osm_value   type  postcode countrycode name  #>   <int> <chr>         <dbl> <chr>   <chr>       <chr> <chr>    <chr>       <chr> #> 1     1 W          28000939 highway unclassifi… stre… 48336    DE          Gröb… #> 2     2 N        4210183016 place   house       house 48703    DE          NA    #> # ℹ 9 more variables: country <chr>, city <chr>, district <chr>, state <chr>, #> #   county <chr>, extent <list>, housenumber <chr>, street <chr>, #> #   geometry <POINT [°]>"},{"path":"https://jslth.github.io/photon/reference/structured.html","id":null,"dir":"Reference","previous_headings":"","what":"Structured geocoding — structured","title":"Structured geocoding — structured","text":"Geocode set place information street, house number, post code. Structured geocoding generally accurate requires information unstructured geocoding. Note structured geocoding must specifically enabled building Nominatim database. generally available komoot's public API pre-built search indices download_searchindex. See vignette(\"nominatim-import\", package = \"photon\") details. can use helper function has_structured_support() check current API supports structured geocoding.","code":""},{"path":"https://jslth.github.io/photon/reference/structured.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structured geocoding — structured","text":"","code":"structured(   .data,   limit = 1,   lang = \"en\",   bbox = NULL,   osm_tag = NULL,   layer = NULL,   locbias = NULL,   locbias_scale = NULL,   zoom = NULL,   progress = interactive() )  has_structured_support()"},{"path":"https://jslth.github.io/photon/reference/structured.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structured geocoding — structured","text":".data Dataframe list containing structured information place geocode. Can contain columns street, housenumber, postcode, city, district, county, state, countrycode. least one columns must present dataframe. Note countries must passed ISO-2 country codes. limit Number results return. maximum 50 results can returned single search term. Defaults 1. single text provided limit greater 1, results can uniquely linked input texts using idx column output. lang Language results. \"default\", returns results local language. bbox object can parsed st_bbox. Results must lie within bbox. osm_tag Character string giving OSM tag filter results . See details. layer Character string giving layer filter results . Can one \"house\", \"street\", \"locality\", \"district\", \"city\", \"county\", \"state\", \"country\", \"\". locbias Numeric vector length 2 object can coerced length-2 numeric vector (e.g. list sfg object). Specifies location bias geocoding format c(lon, lat). Geocoding results biased towards point. radius bias controlled zoom weight place prominence location_bias_scale. locbias_scale Numeric vector specifying importance prominence locbias. higher prominence scale gives weight important places. Possible values range 0 1. Defaults 0.2. zoom Numeric specifying radius locbias effective. Corresponds zoom level OpenStreetMap. exact relation locbias \\(0.25\\text{ km} \\cdot 2^{(18 - \\text{zoom})}\\). Defaults 16. progress TRUE, shows progress bar longer queries.","code":""},{"path":"https://jslth.github.io/photon/reference/structured.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structured geocoding — structured","text":"sf dataframe tibble containing following columns: idx: Internal ID specifying index texts parameter. osm_type: Type OSM element, one N (node), W (way), R (relation), P (polygon). osm_id: OpenStreetMap ID matched element. country: Country matched place. city: City matched place. osm_key: OpenStreetMap key. countrycode: ISO2 country code. housenumber: House number, applicable. postcode: Post code, applicable. locality: Locality, applicable. street: Street, applicable. district: District name, applicable. osm_value: OpenStreetMap tag value. name: Place name. type: Layer type described layer parameter. extent: Boundary box match.","code":""},{"path":"https://jslth.github.io/photon/reference/structured.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structured geocoding — structured","text":"Filtering OpenStreetMap tags follows distinct syntax explained https://github.com/komoot/photon. particular: Include places tag: key:value Exclude places tag: !key:value Include places tag key: key Include places tag value: :value Exclude places tag key: !key Exclude places tag value: :!value","code":""},{"path":"https://jslth.github.io/photon/reference/structured.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structured geocoding — structured","text":"","code":"if (FALSE) { # \\dontrun{ # structured() requires an OpenSearch instance with structured support # the following code will not work off the shelf # refer to vignette(\"nominatim-import\") for details dir <- file.path(tempdir(), \"photon\") photon <- new_photon(dir, opensearch = TRUE) photon$import(password = \"psql_password\", structured = TRUE) photon$start()  # check if structured() is supported has_structured_support()  # structured() works on dataframes containing structurized data place_data <- data.frame(   housenumber = c(NA, \"77C\", NA),   street = c(\"Falealilli Cross Island Road\", \"Main Beach Road\", \"Le Mafa Pass Road\"),   state = c(\"Tuamasaga\", \"Tuamasaga\", \"Atua\") ) structured(place_data, limit = 1)  # countries must be specified as iso2 country codes structured(data.frame(countrycode = \"ws\"))  # traditional parameters from geocode() can also be used but are much more niche structured(data.frame(city = \"Apia\"), layer = \"house\") # matches nothing  # structured geocoding can discern small differences in places safune <- data.frame(   city = c(\"Safune\", \"Safune\"),   state = c(\"Gaga'ifomauga\", \"Tuamasaga\") ) structured(safune, limit = 1) } # }"},{"path":"https://jslth.github.io/photon/reference/with_photon.html","id":null,"dir":"Reference","previous_headings":"","what":"Local photon instances — with_photon","title":"Local photon instances — with_photon","text":"Evaluate R code photon instance without changing active photon mount.","code":""},{"path":"https://jslth.github.io/photon/reference/with_photon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local photon instances — with_photon","text":"","code":"with_photon(photon, code)"},{"path":"https://jslth.github.io/photon/reference/with_photon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local photon instances — with_photon","text":"photon object class photon temporarily mounted session. code Code execute temporary environment.","code":""},{"path":"https://jslth.github.io/photon/reference/with_photon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local photon instances — with_photon","text":"results evaluation code argument.","code":""},{"path":"https://jslth.github.io/photon/reference/with_photon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local photon instances — with_photon","text":"","code":"# Get a public instance pub_photon <- new_photon()  # Mount a custom instance new_photon(url = \"https://localhost:8001/\") #> <photon> #>   Type   : remote #>   Server : https://localhost:8001/  # Geocode with the public instance only once with_photon(pub_photon, geocode(\"Rutland\")) #> Simple feature collection with 1 feature and 11 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -0.6632643 ymin: 52.6423 xmax: -0.6632643 ymax: 52.6423 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 12 #>     idx osm_type osm_id osm_key  osm_value type  countrycode name  country state #>   <int> <chr>     <int> <chr>    <chr>     <chr> <chr>       <chr> <chr>   <chr> #> 1     1 R         57398 boundary administ… coun… GB          Rutl… United… Engl… #> # ℹ 2 more variables: extent <list>, geometry <POINT [°]>  # The custom instance is still mounted get_instance() #> <photon> #>   Type   : remote #>   Server : https://localhost:8001/"},{"path":"https://jslth.github.io/photon/news/index.html","id":"photon-074","dir":"Changelog","previous_headings":"","what":"photon 0.7.4","title":"photon 0.7.4","text":"CRAN release: 2025-10-29 Increment photon version 0.7.4 Match package version photon version Update examples work photon 0.7.4 Set photon 0.7.4 default add supersede warning version < 0.7.0 Add photon type (OpenSearch/ElasticSearch) error message Adjust geocoding error detection OpenSearch Update vignettes OpenSearch Switch Samoa Monaco example country (reliable) Add mount argument new_photon(). FALSE, instance created mounted. Add function with_photon() execute code using local photon instance Add extra info HTTP404 search index download yield result Add $help() method show raw argument information jar file Add CRS checks transformations sf geometry provided reverse() Improve URL checker relying httr2::url_parse() Fix $download_data() method untaring archive storing metadata Fix error detection setup encountering exception without timestamp Fix error detection recognizing OpenSearch import errors Fix path arguments defaulting \".\" Fix example new_photon() Fix progress bar reverse() Purge photon instances examples","code":""},{"path":"https://jslth.github.io/photon/news/index.html","id":"photon-035","dir":"Changelog","previous_headings":"","what":"photon 0.3.5","title":"photon 0.3.5","text":"CRAN release: 2025-02-24 Set limit = 1 default (#2) Increment photon version number Document lang = \"default\" (#8) Allow osm_tags layer arguments take vectors length > 1 (#7) Fix typos old info documentation (#4) Add current date metadata search index tagged “latest” (#5) Fix typo range assertion (#9) Add details HTTP error messages (#6) Improve performance querying duplicates (#10) Always keep number rows original dataset (#3) Fix broken ps command newer Linux versions Made setups stable splitting logs (#11, #12) Handle NA argument input elegantly Added optional latinization Renamed consent argument purge_java() ask","code":""},{"path":"https://jslth.github.io/photon/news/index.html","id":"photon-031","dir":"Changelog","previous_headings":"","what":"photon 0.3.1","title":"photon 0.3.1","text":"CRAN release: 2024-11-11 Initial CRAN submission.","code":""}]
