% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/manage.R
\name{photon_local}
\alias{photon_local}
\title{Local photon instance}
\description{
This R6 class is used to initialize and manage local photon instances.
It can download and setup the Java, the photon executable, and the necessary
Elasticsearch search index. It can start, stop, and query the status of the
photon instance. It is also the basis for geocoding requests at it is used
to retrieve the URL for geocoding.
}
\examples{
if (FALSE) {
# start a new instance using a Monaco extract
photon <- new_photon(path = tempdir(), country = "Monaco")

# start a new instance with an older photon version
photon <- new_photon(path = tempdir(), photon_version = "0.4.1")

# start a new instance with a specific java version
photon <- new_photon(path = tempdir(), java_version = 17)
}
}
\section{Super class}{
\code{\link[photon:photon]{photon::photon}} -> \code{photon_local}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{path}}{Path to the directory where the photon instance is stored.}

\item{\code{proc}}{\code{\link[processx]{process}} object that handles the
external process running photon.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-photon_local-new}{\code{photon_local$new()}}
\item \href{#method-photon_local-mount}{\code{photon_local$mount()}}
\item \href{#method-photon_local-info}{\code{photon_local$info()}}
\item \href{#method-photon_local-purge}{\code{photon_local$purge()}}
\item \href{#method-photon_local-start}{\code{photon_local$start()}}
\item \href{#method-photon_local-stop}{\code{photon_local$stop()}}
\item \href{#method-photon_local-is_running}{\code{photon_local$is_running()}}
\item \href{#method-photon_local-is_ready}{\code{photon_local$is_ready()}}
\item \href{#method-photon_local-get_url}{\code{photon_local$get_url()}}
\item \href{#method-photon_local-clone}{\code{photon_local$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-photon_local-new"></a>}}
\if{latex}{\out{\hypertarget{method-photon_local-new}{}}}
\subsection{Method \code{new()}}{
Initialize a local photon instance. If necessary, downloads the photon
executable, the search index, and Java.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{photon_local$new(
  path = "./photon",
  photon_version = NULL,
  country = NULL,
  date = "latest",
  exact = FALSE,
  quiet = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{Path to a directory where the photon executable and data
should be stored. Defaults to a directory "photon" in the current
working directory.}

\item{\code{photon_version}}{Version of photon to be used. A list of all
releases can be found here: \url{https://github.com/komoot/photon/releases/}.}

\item{\code{country}}{Character string that can be identified by
\code{\link[countrycode]{countryname}} as a country. An extract for this
country will be downloaded. If \code{NULL}, downloads a global search index.}

\item{\code{date}}{Character string or date-time object used to specify the creation
date of the search index. If \code{"latest"}, will download the file tagged
with "latest". If a character string, the value should be parseable by
\code{\link{as.POSIXct}}. If \code{exact = FALSE}, the input value is
compared to all available dates and the closest date will be selected.
Otherwise, a file will be selected that exactly matches the input to
\code{date}.}

\item{\code{exact}}{If \code{TRUE}, exactly matches the \code{date}. Otherwise,
selects the date with lowest difference to the \code{date} parameter.}

\item{\code{quiet}}{If \code{TRUE}, suppresses all informative messages.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-photon_local-mount"></a>}}
\if{latex}{\out{\hypertarget{method-photon_local-mount}{}}}
\subsection{Method \code{mount()}}{
Attach the object to the session. If mounted, all geocoding functions
send their requests to the URL of this instance. Manually mounting
is useful if you want to switch between multiple photon instances.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{photon_local$mount()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-photon_local-info"></a>}}
\if{latex}{\out{\hypertarget{method-photon_local-info}{}}}
\subsection{Method \code{info()}}{
Retrieve metadata about the java and photon version used as well
as the country and creation date of the Eleasticsearch search index.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{photon_local$info()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-photon_local-purge"></a>}}
\if{latex}{\out{\hypertarget{method-photon_local-purge}{}}}
\subsection{Method \code{purge()}}{
Kill the photon process and remove the directory. Useful to get rid
of an instance entirely.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{photon_local$purge()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-photon_local-start"></a>}}
\if{latex}{\out{\hypertarget{method-photon_local-start}{}}}
\subsection{Method \code{start()}}{
Start a local instance of the Photon geocoder. Runs the jar executable
located in the instance directory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{photon_local$start(
  min_ram = 5,
  max_ram = 10,
  host = "0.0.0.0",
  port = "2322",
  ssl = FALSE,
  java_options = NULL,
  photon_options = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{min_ram}}{Initial RAM to be allocated to the Java process
(\code{-Xms} flag).}

\item{\code{max_ram}}{Maximum RAM to be allocated to the Java process
(\code{-Xmx} flag)}

\item{\code{host}}{Character string of the host name that the geocoder should
be opened on.}

\item{\code{port}}{Port that the geocoder should listen to.}

\item{\code{ssl}}{If \code{TRUE}, uses \code{https}, otherwise \code{http}.
Defaults to \code{FALSE}.}

\item{\code{java_options}}{List of further flags passed on to the \code{java}
command.}

\item{\code{photon_options}}{List of further flags passed on to the photon
jar in the java command.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-photon_local-stop"></a>}}
\if{latex}{\out{\hypertarget{method-photon_local-stop}{}}}
\subsection{Method \code{stop()}}{
Kills the running photon process.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{photon_local$stop()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-photon_local-is_running"></a>}}
\if{latex}{\out{\hypertarget{method-photon_local-is_running}{}}}
\subsection{Method \code{is_running()}}{
Checks whether the photon instance is running and ready. The difference
to \code{$is_ready()} is that \code{$is_running()} checks specifically
if the running photon instance is managed by a process from its own
\code{photon} object. In other words, \code{$is_running()} returns
\code{TRUE} if both \code{$proc$is_alive()} and \code{$is_ready()}
return \code{TRUE}. This method is useful if you want to ensure that
the \code{photon} object can control its photon server (mostly internal
use).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{photon_local$is_running()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-photon_local-is_ready"></a>}}
\if{latex}{\out{\hypertarget{method-photon_local-is_ready}{}}}
\subsection{Method \code{is_ready()}}{
Checks whether the photon instance is ready to take requests. This
is the case if the photon server returns a HTTP 400 when sending a
queryless request. This method is useful if you want to check whether
you can send requests.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{photon_local$is_ready()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-photon_local-get_url"></a>}}
\if{latex}{\out{\hypertarget{method-photon_local-get_url}{}}}
\subsection{Method \code{get_url()}}{
Constructs the URL that geocoding requests should be sent to.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{photon_local$get_url()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-photon_local-clone"></a>}}
\if{latex}{\out{\hypertarget{method-photon_local-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{photon_local$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
